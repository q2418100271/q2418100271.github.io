[{"title":"流量包分析","url":"/posts/841/","content":"\n# 流量包分析\n\n## 互联网五层模型\n\n防火墙截取的网络攻击流在公安机关对网络攻击的取证中，流量分析往往是非常重要的一个环节，通过分析\n量，我们能获得许多线索。在学习流量分析之前，我们需要明白一些网络的基础知识，\n\n我们将从常见的网络五层模型，自下而上，即物理层->数据\n链路层->网络层->传输层->应用层 \n\n| 应用层     |\n| ---------- |\n| 传输层     |\n| 网络层     |\n| 数据链路层 |\n| 物理层     |\n\n### 物理层\n\n![image-20210220204230391](../images/image-20210220204230391.png)\n\n当两台计算机相连直接通信的时候，发挥主要作用的是物理层。\n计算机将信号发送到网线上，另外一台计算机负责接收。\n假如我们将第三台电脑通过集线器（hub）相连，相当于三台计算机\n同时连接在同一根导线上，一台计算机发送的信号，会被其他两台\n计算机同时收到，不够安全，也有可能发生信号冲突。\n\n![image-20210220204306714](../images/image-20210220204306714.png)\n\n### 数据链路层\n\n当多台计算机通过交换机（switch）相连的时候，他们采用的通信方式是数据链路层的协议，如下图所示，每一台计算机都分配了对应的MAC地址，当某台计算机想通过给另外一个计算机发送消息时，需要在以太帧头中指明发送方和接收方的地址，交换机在接收到信号之后会根据这个地址正确将信号转发至某一端口（即网线），从而避免了网络内所有计算机都能收到信号。以太帧中的数据包是我们想要传输的信息，包括接下来的IP数据包\n\n![image-20210220204333754](../images/image-20210220204333754.png)![image-20210220204343627](../images/image-20210220204343627.png)\n\n### 网络层\n\n当我们计算机的网络较为大且复杂的时候，我们使用简单的MAC地址并不能很好的管理网络，因为MAC地址是和硬件绑定的，因为假如我们更换了计算机设备，那么就需要重新配置网络的信息。这个时候IP地址网络协议就诞生了。\nIP地址和MAC地址通过Arp协议进行转换。其中路由器的存在使得计算机之间能够跨网段访问。如图所示的网络的三个区域的网段分别是192.168.0.0/24、 192.168.1.0/24、 192.168.2.0/24，网关则是路由器连接每个网段的接口，比如192.168.0.1、192.168.1.1、192.168.2.1，计算机想要跨网段通信时，需要把消息转发给路由器上面的网关，路由器再根据IP地址接着转发。\n下图是arp协议将物理地址转化为网络地址。\n\n![image-20210220204625068](../images/image-20210220204625068.png)\n\n如下图所示，这个是网络层的IP数据包部分，里面指明了源地址和目的地址，IP地址里面的\n数据包包含了我们想要传输的信息，如TCP数据包。\n\n![image-20210220204707301](../images/image-20210220204707301.png)\n\n### 传输层\n\n在网络层的基础上，我们完成了数据通过IP地址的传送，但是我们仍然要确保数据传输\n的可靠性。Tcp就是这样的一种协议，他具有多种特性，如使用三次握手的方法确保连接\n畅通，通过端口的方法来区分不同的连接。\n\n大致流程如下：\n客户端向服务端发送一个请求连接包 ，标识符为SYN序号为 J\n服务端、收到请求连接包，并对SYN J进行确认，然后发送一个回复包，标识符为SYN K, ACK J+1\n客户端向服务端发一个确认收到回复包，标识符为ACK K+1\n这样就完成了三次握手。、![image-20210220204830658](../images/image-20210220204830658.png)\n\n三次握手在wireshark中抓包如下：\n\n![image-20210220205000905](../images/image-20210220205000905.png)\n\n![image-20210220205019963](../images/image-20210220205019963.png)\n\n输层还有一种协议是UDP协议，是不可靠连接，是不能确定对方是否收到的一种数据包\n格式如下：\n\n## Wireshark的基本\n\n## 使用\n\n进入wireshark，首先选择需要监听的网卡\n\n![image-20210220204014794](../images/image-20210220204014794.png)\n\n之后wireshark会进入监听状态，我们可以点击其中任意一个数据包查看相关数据内容\n\n![image-20210220204138581](../images/image-20210220204138581.png)\n\n在这行，我们可以过滤出我们想要的数据包，比如http数据包，\n当然https协议外层有tls封装，所以我们只能抓到https的加密流量\n\n![image-20210228230308438](../images/image-20210228230308438.png)\n\n可以在某个tcp包上面选择右键-f追踪流tcp,从而获取一整个tcp连接的数据\n\n![image-20210228230521086](../images/image-20210228230521086.png)\n\n我们使用wireshark嗅探出了大量的数据之后，我们可以把这些流量保存为一个pcapng为结尾的文件\n\n![image-20210228230812681](../images/image-20210228230812681.png)\n\n![image-20210228230818905](../images/image-20210228230818905.png)\n\n在常见的ctf赛题中，往往是\n给出一个pcapng文件，\n需要我们读取这个流量文件，\n然后从中寻找flag。\n\n\n\n例题：![image-20210228231112875](../images/image-20210228231112875.png)\n\n![image-20210228231155826](../images/image-20210228231155826.png)\n\n打开过滤tcp 搜索flag得到![image-20210228231227159](../images/image-20210228231227159.png)\n\n得到flag fjh1997\n\n","categories":[],"tags":[]},{"title":"数据编码","url":"/posts/43878/","content":"\n**数据编码**\n\n# 常见进制\n\nhex，01\n\n## 进制转换\n\n二进制转ascii码\n二进制转morse码\n二进制转二维码（绘图）\n二进制转图片（hex）\n二进制转万物\n\nhttps://tool.lu/hexconvert/\n\nhttps://coding.tools/cn/binary-to-text\n\n（可百度搜其他工具）\n\n## 常见编码\n\nAscii\nBase家族\nMorse\nShellcode\nUrlencode、Unicode\naaencode、jjencode、uuencode\nJsfuck、brainfuck、ook！\n敲击码\n二维码\n\nhttp://www.atoolbox.net/Category.php?Id=27 工具\n\n### Ascii码\n\n![image-20210220193932731](/images/image-20210220193932731.png)\n\n### base\n\n#### base64\n\n编码原理：Base64编码要求把3个8位字节转化为4个6位的字节，之后在6位的前面补两个0，形成8位一个字节的形式，6位2进制能表示的最大数是2的6次方是64，这也是为什么是64个字符(A-Z,a-z，0-9，+，/这64个编码字符，=号不属于编码字符，而是填充字符)的原因，这样就需要一张映射表，如下：\n\n举个例子(base64)：\n源文本：T h e\n对应ascii码:84 104 101\n8位binary：01010100 01101000 01100101\n6位binary：010101 000110 100001 100101\n高位补0：000010101 00000110 00100001 00100101\n对应十进制：21 6 33 37\n查表：V G h l\n\n![image-20210220200817106](/images/image-20210220200817106.png)\n\n#### base32、16\n\nBase32编码是使用32个可打印字符（字母A-Z和数字2-7）对任意字节数据进行编码的方案，编码后的字符串不用区分大小写并排除了容易混淆的字符，可以方便地由人类使用并由计算机处理，tips：末尾最多有6个=\nThe   -->    KRUGK===\n\nBase16使用数字0-9和字母A-F共计16个ASCII可打印字符对任意字节数据进行编码，tips：不会出现=\nThe   -->    546865\n\n#### base36\n\nBase36包含0~9的数字，加上所有26个字母，不区分大小写，不包含任何标点，所有的字母要不全大写，要不全小写。所以加起来就是 “0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\",或者”0123456789abcdefghijklmnopqrstuvwxyz“\n\n7758521   -->   4maih\n\n特点：\n密文由36个字符（0-9,a-z）组成，加密仅支持整数数字，解密仅支持字符串，不支持中文\n密文由36个字符（0-9,A-Z）\n\n#### base58\n\n采用的字符集为“123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ”，从这不难看出，Base58是纯数字与字母组成而且去掉了容易引起视觉混淆的字符（0：数字零，O：大写O，I：大写i，l:小写L）。9个数字+49个字母=58个。\n\n特点：\nBase58不使用数字”0”，字母大写”O”，字母大写”I”，和字母小写”l”，以及”+”和”/”符号\n\n#### base62\n\n同样的还有 base62编码，就是26个字母的大小写再加上0-9，一共62个字符。\n相比于base64只是去掉了两个符号（+和/）\n\n特点：\n密文由62字符（0-9，a-z，A-Z）组成\n\n#### base85\n\nBase85是一种类似于Base64的二进制文本编码形式，通过使用五个ASCII字符来表示四个字节的二进制数据。例如，它用于将图像嵌入到Adobe PDF文件中。\n\n#### base91、92\n\nBase91\n特点：由91个字符（0-9，a-z，A-Z,!#$%&()*+,./:;<=>?@[]^_`{|}”~）组成\n\nNepnep   -->   _O[2e,qC\n\nBase92\n特点：比base91 多一个字符 〜\n\nNepnep   --> =U_4d9cc\n\n### Morse\n\n摩尔斯电码（英语：Morse code）是一种时通时断的信号代码，通过不同的排列顺序来表达不同的英文字母、数字和标点符号。是由美国人艾尔菲德·维尔与萨缪尔·摩尔斯在1836年发明。\n摩尔斯电码是一种早期的数字化通信形式\n\n![image-20210220200832269](/images/image-20210220200832269.png)\n\n### hellcode\n\nshellcode是一段用于利用软件漏洞而执行的代码，shellcode为16进制的机器码，因为经常让攻击者获得shell而得名。\n\n```\n\\x54\\x68\\x65\\x7f\\x71\\x75\\x69\\x63\\x6b\\x7f\\x62\\x72\\x6f\\x77\\x6e\\x7f\\x66\\x6f\\x78\\x7f\\x6a\\x75\\x6d\\x70\\x73\\x7f\\x6f\\x76\\x65\\x72\\x7f\\x74\\x68\\x65\\x7f\\x6c\\x61\\x7a\\x79\\x7f\\x64\\x6f\\x67\n```\n\n```\nThe quick brown fox jumps over the lazy dog\n```\n\n### urlencode\n\nurl编码又叫百分号编码，是统一资源定位(URL)编码方式。\nURL地址（常说网址）规定了常用的数字，字母可以直接使用，另外一批作为特殊用户字符也可以直接用（/,:@等），剩下的其它所有字符必须通过%xx编码处理。\n编码方法很简单，在该字节ascii码的的16进制字符前面加%. 如 空格字符，ascii码是32，对应16进制是'20'，那么urlencode编码结果是:%20。\n\n[%77%65%6C%63%6F%6D%65%20%74%6F%20%74%68%65%20%4E%65%70%6E%65%70%20%53%74%75%64%69%6F]()\n\n```\nThe quick brown fox jumps over the lazy dog\n```\n\n### unicode\n\nUnicode，中文又称万国码、国际码、统一码、单一码，是计算机科学领域的业界标准。它整理、编码了世界上大部分的文字系统，使得电脑可以用更为简单的方式来呈现和处理文字。 Unicode伴随着通用字符集的标准而发展，同时也以书本的形式对外发表。Unicode至今仍在不断增修，每个新版本都加入更多新的字符。\n\n```\n\\u4f60\\u597d\n你好\n```\n\n### aaencode\n\n以将JS代码转换成常用的网络表情，也就是我们说的颜文字js加密。\n\n```\nﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+/*´∇｀*/(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(oﾟｰﾟo)+ (ﾟｰﾟ)+ (ﾟДﾟ) [ﾟΘﾟ]+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_');\n```\n\n你好啊\n\n### jjencode\n\n```\n$=~[];$={___:++$,$$$$:(![]+\"\")[$],__$:++$,$_$_:(![]+\"\")[$],_$_:++$,$_$$:({}+\"\")[$],$$_$:($[$]+\"\")[$],_$$:++$,$$$_:(!\"\"+\"\")[$],$__:++$,$_$:++$,$$__:({}+\"\")[$],$$_:++$,$$$:++$,$___:++$,$__$:++$};$.$_=($.$_=$+\"\")[$.$_$]+($._$=$.$_[$.__$])+($.$$=($.$+\"\")[$.__$])+((!$)+\"\")[$._$$]+($.__=$.$_[$.$$_])+($.$=(!\"\"+\"\")[$.__$])+($._=(!\"\"+\"\")[$._$_])+$.$_[$.$_$]+$.__+$._$+$.$;$.$$=$.$+(!\"\"+\"\")[$._$$]+$.__+$._+$.$+$.$$;$.$=($.___)[$.$_][$.$_];$.$($.$($.$$+\"\\\"\"+\"\\\\\"+$._+$.$__+$.$$$$+$.$$_+$.___+\"\\\\\"+$._+$.$_$+$.$__$+$.$$$+$.$$_$+\"\\\\\"+$._+$.$_$+$.$_$+$.$__+$.$_$_+\"\\\"\")())();\n```\n\n你好啊\n\n类似的还有uuencode等\n\n### jsfuck\n\nJSFuck 可以让你只用 6 个字符[ ]( ) ! +来编写 JavaScript 程序。\n\n还有brainfuck\n\n### Ook！\n\n工具（https://www.splitbrain.org/services/ook）\n\n### 敲击码\n\n敲击码（Tap code）是一种以非常简单的方式对文本信息进行编码的方法。因该编码对信息通过使用一系列的点击声音来编码而命名，敲击码是基于 5 ×5 方格波利比奥斯方阵来实现的，不同点是是用 K 字母被整合到 C 中。\n\n![image-20210220202356471](/images/image-20210220202356471.png)\n\n![image-20210220202400269](/images/image-20210220202400269.png)\n\n### 二维码\n\n用某种特定几何图形按一定规律在平面分步的黑白相间的图形记录数据符号信息\n\n堆叠式 / 行排式二维码又称堆积式二维条码或层排式二维条码，其编码原理是建立在一维条码基础之上，按需要堆积成二行或多行。 Code 16 k、Code 49、PDF417\n\n矩阵式二维码：QR CODE\n\n矩阵式二维码，最流行莫过于QR CODE ,我们常说的二维码就是它了。矩阵式二维条码（又称棋盘式二维条码）它是在一个矩形空间通过黑、白像素在矩阵中的不同分布进行编码。在矩阵相应元素位置上，用点（方点、圆点或其他形状）的出现表示二进制“1”，点的不出现表示二进制的“0”，点的排列组合确定了矩阵式二维条码所代表的意义。矩阵式二维条码是建立在计算机图像处理技术、组合编码原理等基础上的一种新型图形符号自动识读处理码制。具有代表性的矩阵式二维条码有：Code One、MaxiCode、QR Code、 Data Matrix、Han Xin Code、Grid Matrix 等。\n\n![image-20210220202443788](/images/image-20210220202443788.png)\n\n#### 特点\n\nQR码的特点\n存储大容量信息\n传统的条形码只能处理20位左右的信息量，与此相比，QR码可处理条形码的几十倍到几百倍的信息量。\n另外，QR码还可以支持所有类型的数据。（如：数字、英文字母、日文字母、汉字、符号、二进制、控制码等）。一个QR码最多可以处理7089字(仅用数字时)的巨大信息量。\n在小空间内打印\nQR码使用纵向和横向两个方向处理数据，如果是相同的信息量，QR码所占空间为条形码的十分之一左右。(还支持Micro QR码，可以在更小空间内处理数据。)\n\n![image-20210220202520397](/images/image-20210220202520397.png)\n\n#### QR码的基本结构\n\nQR码的基本结构\nQR(Quick-Response) code是被广泛使用的一种二维码，解码速度快。\n格式信息：纠错等级\n版本信息：即二维码的规格，QR码符号共有40种规格的矩阵\n\n![image-20210220202550664](/images/image-20210220202550664.png)\n\n## 稀奇古怪的编码\n\n社会主义核心价值观\n与佛论禅\n与熊论道\n\n可直接搜索工具","categories":[],"tags":["编码"]},{"title":"黑苹果系统安装","url":"/posts/52743/","content":"\n# 过程\n\n前提：bios关闭安全启动\n下载镜像，关注【黑锅小兵的部落阁】获取**\n\n本人电脑配置\n\n![0](/images/0.png)\n\n## 通过TransMAC启动盘制作 将镜像刻录到16G以上的U盘中**\n\n（一开始用的etcher但是制作几次都失败了）![0.1](/images/0.1.png)\n\n作完后先别着急重启，从github或者各种黑苹果论坛搜你的电脑型号+efi找到相应的文件\n\n**将下载EFI文件夹直接替换U盘中的EFI\n\n## **重启按f2/f12（根据各自电脑型号） 选择U盘启动，即可进行安装**\n\n镜像是带PE的，所以选择U盘安装的时候一个是安装Big Sur，一个是进入PE 进入安装界面后选择【磁盘工具】抹盘（发现自己没有多余的分区，在不想删除数据的情况下分区可以使用傲梅磁盘分区），选择【安装Mac Os】到抹掉的磁盘中 期间会有多次重启，每次重启都要选择U盘启动![1](/images/1.png)\n\n## 贝U盘中EFI分区里的EFI文件夹到磁盘中的EFI分区**\n\n通过U盘引导能进入系统，拔掉U盘就进不去了，所以接下来要做的就是把U盘的EFI复制到 磁盘中的EFI 里，使之让系统可以自己引导。\n\n### **第一种方法**\n\n【步骤】\n1：挂载EFI 分区\n\n用下面命令显示 分区列表\ndiskutil list\n可以看到在disk0下面，id为1 ![在这里插入图片描述](/images/20200713010816275.png)\n所以写 disk0s1(一定要跟上面的匹配！！)\n\n```bash\n终端执行  sudo diskutil mount disk0s1\n\n```\n\n注：需要输入密码\n成功后长这个样子\n![在这里插入图片描述](/images/20200713010913889.png)\n然后把U盘中的EFI文件夹复制过来就行了\n\n### **第二种方法：进入windows/PE 通过DiskGenius 进行拷贝。**（推荐）\n\n```bash\n 因为只要能达到磁盘中的EFI分区里有引导文件的目的就行了，\n 所以其实也不一定能非要从U盘里拷贝，\n 所以最简单的方式就是进入windows/PE 通过DiskGenius 进行拷贝。\n```\n\n进入windows/PE打开DiskGenius，将U盘中的EFI文件夹复制过去就行了\n![在这里插入图片描述](/images/202007130140429.png)\n\n### 添加UEFI引导选项**\n\n```\n还差最后一步，否则系统发现了引导，不能自启动选择进入系统，\n所以要进入PE添加UEFI引导，重启选择U盘中的PE系统\n因为我们是OC引导所以，下图中的文件选择就不是在CLOVER文件夹里了（因为也没有），\n而是在/EFI/BOOT里\n\n```\n\n![在这里插入图片描述](/images/20200713011438271.png)\n\n文件名不一定是CLOVERX64.efi 但是文件位置是没错的 可以尝试尝试\n\n## **重启f2进入bios将mac引导放在第一启动项就可以win/mac 双系统选择了**\n\n# 实测系统\n\n![6](/images/6.png)\n\n![7](/images/7.png)\n\n![5.](/images/5..png)\n\n不过独显无法使用只能用核显 ","categories":[],"tags":["系统"]},{"title":"图片隐写","url":"/posts/55344/","content":"\n# 隐写图片\n\nMisc为英文miscellaneous的前四个字母，\n杂项、混合体、大杂烩的意思。\n主要类型：\n1.数据编码/图形密码\n2.图片隐写\n3.音频&视频隐写\n\n4.流量分析\n5.内存取证6.游戏隐写.\n\n## 使用工具：010editor；kali\n\n## 图片隐写分类\n\n属性\n\n文件末尾藏字符串\n\n文件包含\n\n修改文件头\n\nGIF\n\nPNG(bmp)\n\njpg\n\n双图隐写\n\nstegpy\n\nsilenteye\n\n## 详细分类\n\n### 右击属性\n\n![image-20210209200549424](/images/image-20210209200549424.png)\n\n### 文件十六进制藏有字符串\n\n![image-20210209202404086](/images/image-20210209202404086.png)\n\n### 文件包含\n\nbinwalk分离文件\n\n![image-20210209203041076](/images/image-20210209203041076.png)\n\n可以看到效果从271007块偏移开始就是另一张jpg\n\n**使用foremost工具分离**\n\nforemost是一个基于文件文件头和尾部信息以及文件的内建数据结构恢复文件的命令行工具，win可以下载地址，Linux可以\n通过下面命令安装 \n\n```\napt-get install foremost\n```\n\n![image-20210209203315763](/images/image-20210209203315763.png)\n\n安装foremost后你可以使用foremost -help查看使用帮助，这里最简单分离文件的命令为：\n\n```\n foremost carter.jpg \n```\n\n当我们使用这行命令后，foremost会自动生成output目录存放分离出文件：\n\n![image-20210209203552735](/images/image-20210209203552735.png)\n\n可以得到隐藏图片\n\n### 修改文件头\n\n![image-20210209222755980](/images/image-20210209222755980.png)\n\nJPEG (jpg)， 文件头：FFD8FF\n\nPNG (png)， 文件头：89504E47\n\nGIF (gif)， 文件头：47494638\n\nTIFF (tif)， 文件头：49492A00\n\nWindows Bitmap ( bmp)，文件头：424D\n\nCAD (dwg)， 文件头：41433130\n\nAdobe Photoshop (psd)， 文件头：38425053\n\nRich Text Format (rtf)， 文件头：7B5C727466\n\nXML (xml)， 文件头：3C3F786D6C\n\nHTML (html)， 文件头：68746D6C3E\n\nEmail [thorough only] (eml)， 文件头：44656C69766572792D646174653A\n\nOutlook Express (dbx)， 文件头：CFAD12FEC5FD746F\n\nOutlook (pst)， 文件头：2142444E\n\nMS Word/Excel (xls.or.doc)， 文件头：D0CF11E0\n\nMS Access (mdb)， 文件头：5374616E64617264204A\n\nWordPerfect (wpd)， 文件头：FF575043\n\nAdobe Acrobat (pdf)， 文件头：255044462D312E\n\nQuicken (qdf)， 文件头：AC9EBD8F\n\nWindows Password (pwl)， 文件头：E3828596\n\nZIP Archive (zip)， 文件头：504B0304\n\nRAR Archive (rar)， 文件头：52617221\n\nWave (wav)， 文件头：57415645\n\nAVI (avi)， 文件头：41564920\n\nReal Audio (ram)， 文件头：2E7261FD\n\nReal Media (rm)， 文件头：2E524D46\n\nMPEG (mpg)， 文件头：000001BA\n\nMPEG (mpg)， 文件头：000001B3\n\nQuicktime (mov)， 文件头：6D6F6F76\n\nWindows Media (asf)， 文件头：3026B2758E66CF11\n\nMIDI (mid)， 文件头：4D546864\n\n### GIF\n\n打开图片\n\n![aaa](/images/aaa.gif)\n\n有字母一闪而过\n\n用010editor打开发现文件头没有问题 为gif\n\n![image-20210209223344536](/images/image-20210209223344536.png)\n\n此时用<u>**Namo_Gif**</u>\n\n![image-20210209223840204](/images/image-20210209223840204.png)\n\n![image-20210209223902146](/images/image-20210209223902146.png)\n\n![image-20210209223927619](/images/image-20210209223927619.png)\n\n可得flag。\n\n### png（bmp）\n\n![pngcheck](/images/pngcheck.png)\n\nzlib(010/pngcheck)\nIHDR、IDAT\nlsb隐写/lsb加密（zsteg/stegsolve）\nwbs43open（bmp）\n\n![image-20210209225659056](/images/image-20210209225659056.png)\n\n使用checkpng 检查图片结构是否存在问题，发现有一些异常的IDAT块。\n\n![image-20210209225342521](/images/image-20210209225342521.png)\n\n可以看到keyword\n\n**BINWALK**\n\n关于binwalk安装可以参考https://www.cnblogs.com/pcat/p/5256288.html\n\n### JPG\n\njphide(jphs）\nsteghide\nsteghide extract -sf good-已合并.jpg -p 123456\nstegdetect\nstegdetect.exe -tjopi -s1000.0 *.jpg （查看图片隐写方式）\nstegbreak -r rules.ini -f password.txt -t p *.jpg（爆破密码）\noutguess\noutguess -k \"key\" -r 文件名 -t 保存的文件名\nF5-steganography\njava Extract F5.jpg -e misc -p  11111\n水印(单图)(工具+Java盲水印)\n\n### 双图隐写（XOR/脚本（三个））\n\n### stegpy（啥都能藏.JPG\n\n### silenteye(同上\n\n","categories":[],"tags":["学习"]},{"title":"搭建博客过程记录","url":"/posts/22164/","content":"\n# 博客环境搭建\n\n> 本文系统环境信息：Win10专业版，64位（10.0 版本18362）\n>\n> Node.js：12.13.0 Git：2.24.0\n\n## 下载Git和Node.js\n\n###  Node.js的安装与配置\n\n首先去[Node.js官网](https://nodejs.org/en/download/) 下载node.js的安装程序，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。\n\n![Node.js下载以及版本的选择](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvbm9kZWpzLTAucG5n?x-oss-process=image/format,png)\n\n下载好与电脑系统对应的安装程序后，开始安装流程：\n\n1. 打开下载好的Node.js安装程序，点击Next，进行下一步的安装；\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvbm9kZS0xLnBuZw?x-oss-process=image/format,png)\n\n将\"I accept the terms in the License Agreement\"前面的复选框勾选，同意安装协议，再点击Next，进行下一步操作；\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvbm9kZS0yLnBuZw?x-oss-process=image/format,png)\n\n选择Node.js安装程序的安装位置，在这里我以\"C:\\Program Files\\nodejs\"为例，点击Next，进入下一步操作；\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvbm9kZS0zLnBuZw?x-oss-process=image/format,png)\n\n选择安装的模块和功能，这里全部安装，并添加到系统环境变量 ，继续点击Next，进入下一步操作；\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvbm9kZS00LnBuZw?x-oss-process=image/format,png)\n\n这一步可以跳过，这个选项的意思是安装一些编译本地模块的工具，比如python，C/C++等，点击Next，进入下一步；\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvbm9kZS01LnBuZw?x-oss-process=image/format,png)\n\n点击\"Install\"，等待Node.js安装完成；\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvbm9kZS02LnBuZw?x-oss-process=image/format,png)\n\n当看到下图所显示的情况，Node.js就成功安装完毕。\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvbm9kZS03LnBuZw?x-oss-process=image/format,png)\n\n验证安装，并测试Node.js是否加入环境变量，当出现如下图的情况，Node.js安装大功告成。\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvbm9kZS04LnBuZw?x-oss-process=image/format,png)\n\n如果执行`node -v`报错的话，那么手动将Node.js的安装路径添加到环境变量中，右击点击我的电脑 ->属性 -> 高级系统设置 -> 环境变量，在系统变量下找到名为path的变量名，如下图：\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcxOTExMDcucG5n?x-oss-process=image/format,png)\n\n选中path，或者双击，然后将你node.js的安装路径放在path变量值的最后面，如果添加之前path值最后有 英文的分号，则直接将路径添加进去即可，如果没有，先添加分号，然后点击保存，回到桌面，打开cmd（Win+R），执行`node -v`，看是否成功。\n\n1. 设置npm的镜像源：\n\n```bash\n# 查看npm的配置\nnpm config list\n# 默认源\nnpm config set registry https://registry.npmjs.org\n# 临时改变镜像源\nnpm --registry=https://registry.npm.taobao.org\n# 永久设置为淘宝镜像源\nnpm config set registry https://registry.npm.taobao.org\n# 另一种方式，编辑 ~/.npmrc 加入下面内容\nregistry = https://registry.npm.taobao.org\n12345678910\n```\n\n设置npm的内置路径——>全局模块路径和缓存路径（*可选*）\n\n如果不改变内置路径也可，除非你的C盘空间足够bigger，这一步可以略过，不改变的话，它的路径在：\n\n> 此处参考：[jyjin的node环境变量配置，npm环境变量配置](https://blog.csdn.net/jianleking/article/details/79130667)\n\n- npm包全局目录：`C:/Users/[username]/AppData/Roaming/npm/node_modules`\n- npm包全局命令目录：`C:/Users/[username]/AppData/Roaming/npm`\n- npm实际去找全局命令的目录：`C:/Users/[username]/.npmrc` 文件内容的`prefix`值\n- npm包全局cache目录：`C:/Users/[username]/.npmrc` 文件内容的`cache`值\n\n首先在你Node.js的安装位置，新建两个文件夹，`node_global`和`node_cache`，我的路径是：\n\n```\nC:\\Program Files\\nodejs\\node_global\nC:\\Program Files\\nodejs\\node_cache\n12\n```\n\n然后分别执行的命令就是：\n\n```bash\nnpm config set prefix\"C:\\Program Files\\nodejs\\node_global\"\nnpm config set cache \"C:\\Program Files\\nodejs\\node_cache\"\n12\n```\n\n然后在配置环境变量，右击我的电脑 ->属性 -> 高级系统设置 -> 环境变量同样的位置，在用户变量的地方，找到path变量进行修改，修改值如下图：\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvbm9kZS0xMS5wbmc?x-oss-process=image/format,png)\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvbm9kZS0xMi5wbmc?x-oss-process=image/format,png)\n\n然后就大功告成了，Node.js就安装完毕了，下面开始Git安装。👇👇👇\n\n### Git的安装与配置\n\n首先就是去[Git官网](https://git-scm.com/)下载Git，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcxOTM3MzcucG5n?x-oss-process=image/format,png)\n\n1. 下载好Git的安装包，开始安装，打开安装包，出现如图的界面，点击Next：\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvZ2l0LTEucG5n?x-oss-process=image/format,png)\n\n1. 选择你要安装的位置，我以C盘为例，路径为图中所示，安装到其他位置的话，点击Browse，选择你要安装的位置，然后点击Next，进入下一步：\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvZ2l0LTIucG5n?x-oss-process=image/format,png)\n\n1. 选择你是否创建桌面快捷放方式，其他默认即可，点击Next，进入下一步：\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvZ2l0LTMucG5n?x-oss-process=image/format,png)\n\n1. 是否将Git快捷方式的目录加入开是菜单栏\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvZ2l0LTQucG5n?x-oss-process=image/format,png)\n\n1. 这个是选择文本编辑器的方式，默认是Vim，也可以选择其他的方式，自主选择，在这里我选择的Vim默认方式。选择好文本编辑器的方式后，点击Next，进入下一个流程：\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvZ2l0LTUucG5n?x-oss-process=image/format,png)\n\n1. 选择安装 Git 时对环境变量PATH的影响，第一种影响较小，第三种会影响到Windows的自带工具，默认勾选中间项，建议不要修改，直接点击 “Next” 继续安装：\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvZ2l0LTYucG5n?x-oss-process=image/format,png)\n\n1. 选择 Git 在使用 HTTPS 时使用的库，若无特殊需求，可保持默认选项，点击 “Next” 继续安装：\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvZ2l0LTcucG5n?x-oss-process=image/format,png)\n\n1. 选择提交与拉取记录时，对换行符的处理方式，若无特殊需要，默认选择即可，点击 “Next” 继续安装：\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvZ2l0LTgucG5n?x-oss-process=image/format,png)\n\n1. 选择模拟终端软件（即命令行窗口软件），若无特殊需要，可默认选择，点击 “Next” 继续安装：\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvZ2l0LTkucG5n?x-oss-process=image/format,png)\n\n1. 最新功能的询问，若不想尝试尚未保证稳定性的新功能，默认不勾选，点击 “Install” 即可完成安装：\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvZ2l0LTEwLnBuZw?x-oss-process=image/format,png)\n\n1. 安装完成\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvZ2l0LTExLnBuZw?x-oss-process=image/format,png)\n\n1. 回到桌面，点击鼠标右键，会出现两个选项`Git GUI Here`和`Git Bash Here`，在打开Cmd(Win+R)，分别输入`git`和`git --version`，如果出现如下图的情况，即安装成功！\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvZ2l0LTEyLnBuZw?x-oss-process=image/format,png)\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvZ2l0LTEzLnBuZw?x-oss-process=image/format,png)\n\n# Github注册以及Github Pages创建\n\n1. 打开Github[官网首页](https://github.com/)，点击右上角的**Sign Up** ，然后在出现的页面上填写你的相关信息，进行注册：\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMDM0MzIucG5n?x-oss-process=image/format,png)\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMDQ2MzkucG5n?x-oss-process=image/format,png)\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMDQ5NTUucG5n?x-oss-process=image/format,png)\n\n验证完成后，点击Next：Select a plan，会出现如上图的验证界面，同理，只需要将其中的动物调整为正向显示即可。接着会出现下图的界面，选择Free，下方的两个选项可选可不选，点击**Continue**继续：\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMTE0MzEucG5n?x-oss-process=image/format,png)\n\n这时Github会给你发一封邮件，验证一下即可，验证过后才可以创建库。\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMTI3MjEucG5n?x-oss-process=image/format,png)\n\n验证完成后，开始创建库，如下图所示，仓库名创建格式必须为：`<用户名>.github.io`，`Description`为描述仓库，自定义写，填写必要的描述，也可不填。勾选`Initialize this repository with a README`点击`Creat repository`进行创建。\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMTI1MzgucG5n?x-oss-process=image/format,png)\n\n然后就会出现如图所示的界面，即仓库创建成功！\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMTMzMjEucG5n?x-oss-process=image/format,png)\n\n我们来测试一下，点击`Create new file`，出现如下界面，然后命名文件名为`index.html`，在填写如图的内容，再点击`Commit new file`，即创建成功，然后打开一个新的网页，输入网址`https://<你的用户名>.github.io`，即可以看见一个新的网页，其中的内容就是你写的内容。\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMTQwMjkucG5n?x-oss-process=image/format,png)\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMTM5NTcucG5n?x-oss-process=image/format,png)\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMTQ0NTAucG5n?x-oss-process=image/format,png)\n\n至此，Github的注册以及Github Pages已经创建完成了。\n\n# 配置Git用户名和邮箱\n\n在桌面点击鼠标右键，点击`Git Bash Here`，会出现一个界面如下图所示：\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMTUxMTgucG5n?x-oss-process=image/format,png)\n\n然后分别输入下面的两个命令，并回车：\n\n```bash\ngit config --global user.name \"此处填写你注册时的用户名\"\ngit config --global user.email \"此处填写你注册时的邮箱\"\n# 一般只要不报错，可以跳过下面寻找.gitconfig文件\n123\n```\n\n然后找到`.gitconfig`文件，文件存放位置在`C:/Users/[username]/.gitconfig`（未找到的话，请开启显示隐藏文件的功能），用编辑器打开，看到如下图所示的内容，即配置成功！\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMjAwMTYucG5n?x-oss-process=image/format,png)\n\n# 本地安装hexo静态博客框架以及发布到Github Pages\n\n1. 首先选择一个磁盘作为你博客文件的存放位置，然后新建一个文件夹，比如名为blogtest的文件夹，创建完后，先不要点进去，在此处点击鼠标右键，选择`Git Bash Here`，然后依次输入如下命令，：\n\n```bash\n# hexo框架的安装\nnpm install -g hexo-cli\n# 等上一个命令完成后，在输入下面的命令\nhexo init <新建文件夹的名称>  #初始化文件夹\ncd <新建文件夹的名称>\nnpm install  # 安装博客所需要的依赖文件\n123456\n```\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMjExMjkucG5n?x-oss-process=image/format,png)\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMjExNDQucG5n?x-oss-process=image/format,png)\n\n等待运行完成，此时文件夹中多了许多文件。\n**注意**：**后续的命令均需要在站点目录下（即文件夹内）使用Git Bash运行。**\n此时Hexo框架的本地搭建已经完成了。我们来运行一下看看，命令行依次输入以下命令 :\n\n```bash\nhexo g\nhexo s\n12\n```\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMjExNTcucG5n?x-oss-process=image/format,png)\n\n浏览器中打开http://locakhost:4000或者127.0.0.1:4000，可以看到一个网页，说明Hexo博客已经成功在本地运行。\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMjEyMDYucG5n?x-oss-process=image/format,png)\n\n##  本地博客发布到Github Pages\n\n之前的步骤中，我们已经完成了对Github账户的注册以及Github Pages的创建，接下来是将本地博客发布至Github Pages。\n\n1. 首先需要安装发布的插件，在站点目录下执行下面的命令，也就是创建的博客目录下：\n\n```bash\nnpm install hexo-deployer-git --save\n1\n```\n\n1. 紧接着，将本地目录与GitHub关联起来，输入下面的命令行：\n\n```bash\nssh-keygen -t rsa -C \"你的邮箱地址\"\n1\n```\n\n输入后一直回车，然后在`C:/Users/[username]`目录下找到名为`.ssh`的文件夹， 文件夹内会有两个文件，一个`id_rsa.pub`一个`id_rsa`，用文本编辑器打开`id_rsa.pub`，复制里面的的内容。 然后打开Github，点击右上角的头像 **Settings** 选择**SSH and GPG keys**\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMjI3NDYucG5n?x-oss-process=image/format,png)\n\n点击**New SSH key** 将之前复制的内容粘帖到Key的框中。 上面的**Title**可以随意，点击**Add SSH key** 完成添加。\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMjMwNDkucG5n?x-oss-process=image/format,png)\n\n然后回到Git的命令行界面，测试一下是否与GitHub连接成功。输入下面的命令行：\n\n```bash\nssh -T git@github.com\n1\n```\n\n点击回车，然后会出现一个询问内容，输入`yes`，回车，会出现一段内容，`Hi <account name>! You've successfully authenticated, but GitHub doesnot provide shell access.`。 说明连接成功。此处这个`<account name>`应该是你Github的用户名。\n\n1. 进入博客站点目录，用文本编辑器打开`_config.yml`，这个`_config.yml`是博客的配置文件，在以后的博客修改，如个性化修改，博客SEO优化等都会使用到，修改如下图的几个地方：\n\n```yml\ntitle: 你的博客名\nsubtitle: 博客的副标题，有些主题支持\ndescription: 博客描述\nkeywords: 博客关键词\nauthor: 作者，在文章中显示\nlanguage: 博客语言语种   \ntimezone: 时区\n1234567\n```\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMjQxMzgucG5n?x-oss-process=image/format,png)\n\n滑到文件最底部，有一个deploy，在deploy下面添加一个repo项 ，一个branch项。填入如下代码，并如下图所示：\n\n```yml\ntype: git\nrepo: git@github.com:Github用户名/github用户名.github.io.git  \n//也可使用https地址，如：https://github.com/Github用户名/Github用户名.github.io.git\t\t\t\nbranch: master\n1234\n```\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMjQxNTEucG5n?x-oss-process=image/format,png)\n\n1. 最后就是生成页面，并发布至Github Pages，执行如下命令：\n\n```bash\n# Hexo会根据配置文件渲染出一套静态页面\nhexo g\n# 将上一步渲染出的一系列文件上传至至Github Pages\nhexo d\n# 也可以直接输入此命令，直接完成渲染和上传\nhexo g -d\n123456\n```\n\n上传完成后，在浏览器中打开**https://<用户名>.github.io**，查看上传的网页。如果页面变成了之前本地调试时的样子，说明上传以及完成了。没变的话查看一下上传时命令行窗口的信息有没有错误信息，没有的话清除一下浏览器缓存试试。","categories":[],"tags":["首次"]}]