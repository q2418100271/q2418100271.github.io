<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>德丽莎</title>
  
  <subtitle>--一条咸鱼</subtitle>
  <link href="http://q2418100271.github.io/atom.xml" rel="self"/>
  
  <link href="http://q2418100271.github.io/"/>
  <updated>2021-02-09T12:05:56.212Z</updated>
  <id>http://q2418100271.github.io/</id>
  
  <author>
    <name>德丽莎</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>图片隐写</title>
    <link href="http://q2418100271.github.io/posts/55344/"/>
    <id>http://q2418100271.github.io/posts/55344/</id>
    <published>2021-02-09T11:48:24.000Z</published>
    <updated>2021-02-09T12:05:56.212Z</updated>
    
    <content type="html"><![CDATA[<p>Misc 为英文 miscellaneous 的前四个字母，<br>杂项、混合体、大杂烩的意思。<br>主要类型：<br>1. 数据编码 / 图形密码<br>2. 图片隐写<br>3. 音频 &amp; 视频隐写</p><p>4. 流量分析<br>5. 内存取证 6. 游戏隐写.</p><h2 id="使用工具：010editor；kali"><a href="# 使用工具：010editor；kali" class="headerlink" title="使用工具：010editor；kali"></a>使用工具：010editor；kali</h2><h2 id="图片隐写分类"><a href="# 图片隐写分类" class="headerlink" title="图片隐写分类"></a>图片隐写分类 </h2><h3 id="属性"><a href="# 属性" class="headerlink" title="属性"></a> 属性 </h3><h3 id="文件末尾藏字符串"><a href="# 文件末尾藏字符串" class="headerlink" title="文件末尾藏字符串"></a> 文件末尾藏字符串 </h3><h3 id="文件包含"><a href="# 文件包含" class="headerlink" title="文件包含"></a> 文件包含 </h3><h3 id="修改文件头"><a href="# 修改文件头" class="headerlink" title="修改文件头"></a> 修改文件头 </h3><h3 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h3><h3 id="PNG-bmp"><a href="#PNG-bmp" class="headerlink" title="PNG(bmp)"></a>PNG(bmp)</h3><h3 id="jpg"><a href="#jpg" class="headerlink" title="jpg"></a>jpg</h3><h3 id="双图隐写"><a href="# 双图隐写" class="headerlink" title="双图隐写"></a> 双图隐写 </h3><h3 id="stegpy"><a href="#stegpy" class="headerlink" title="stegpy"></a>stegpy</h3><h3 id="silenteye"><a href="#silenteye" class="headerlink" title="silenteye"></a>silenteye</h3><h2 id="详细分类"><a href="# 详细分类" class="headerlink" title="详细分类"></a> 详细分类 </h2><h3 id="右击属性"><a href="# 右击属性" class="headerlink" title="右击属性"></a> 右击属性</h3><p><img src="/images/image-20210209200549424.png" alt="image-20210209200549424"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Misc 为英文 miscellaneous 的前四个字母，&lt;br&gt;杂项、混合体、大杂烩的意思。&lt;br&gt;主要类型：&lt;br&gt;1. 数据编码 / 图形密码&lt;br&gt;2. 图片隐写&lt;br&gt;3. 音频 &amp;amp; 视频隐写&lt;/p&gt;
&lt;p&gt;4. 流量分析&lt;br&gt;5. 内存取证 6. 游</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>黑苹果 win 双系统安装</title>
    <link href="http://q2418100271.github.io/posts/43789/"/>
    <id>http://q2418100271.github.io/posts/43789/</id>
    <published>2021-02-09T10:13:07.000Z</published>
    <updated>2021-02-09T11:29:44.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="步骤"><a href="# 步骤" class="headerlink" title="步骤"></a>步骤 </h1><p> 前提：bios 关闭安全启动 <br> 下载镜像【黑锅小兵的部落阁】**</p><h2 id="通过 etcher- 将镜像刻录到 16G 以上的 U 盘中"><a href="# 通过 etcher- 将镜像刻录到 16G 以上的 U 盘中" class="headerlink" title="通过 etcher 将镜像刻录到 16G 以上的 U 盘中"></a><strong>通过 etcher 将镜像刻录到 16G 以上的 U 盘中</strong></h2><p><img src="%5Cgallery%5C2.png" alt="2"></p><a id="more"></a><p><strong>将 EFI 文件夹直接替换 U 盘中的 EFI</strong></p><h2 id="重启按 f2-f12- 选择 U 盘启动，即可进行安装"><a href="# 重启按 f2-f12- 选择 U 盘启动，即可进行安装" class="headerlink" title="重启按 f2/f12 选择 U 盘启动，即可进行安装"></a><strong>重启按 f2/f12 选择 U 盘启动，即可进行安装 </strong></h2><p> 镜像是带 PE 的，所以选择 U 盘安装的时候一个是安装 Big Sur，一个是进入 PE 进入安装界面后选择【磁盘工具】抹盘，选择【安装 Mac Os】到抹掉的磁盘中 期间会有多次重启，每次重启都要选择 U 盘启动</p><h2 id="拷贝 U 盘中 EFI 分区里的 EFI 文件夹到磁盘中的 EFI 分区"><a href="# 拷贝 U 盘中 EFI 分区里的 EFI 文件夹到磁盘中的 EFI 分区" class="headerlink" title="拷贝 U 盘中 EFI 分区里的 EFI 文件夹到磁盘中的 EFI 分区"></a><strong>拷贝 U 盘中 EFI 分区里的 EFI 文件夹到磁盘中的 EFI 分区 </strong></h2><p> 通过 U 盘引导能进入系统，拔掉 U 盘就进不去了，所以接下来要做的就是把 U 盘的 EFI 复制到 磁盘中的 EFI 里，使之让系统可以自己引导。</p><h3 id="第一种方法"><a href="# 第一种方法" class="headerlink" title="第一种方法"></a><strong>第一种方法</strong></h3><p>【步骤】<br>1：挂载 EFI 分区</p><p>用下面命令显示 分区列表 <br>diskutil list<br> 可以看到在 disk0 下面，id 为 1 <img src="https://img-blog.csdnimg.cn/20200713010816275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxMjgzMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所以写 disk0s1(一定要跟上面的匹配！！)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">终端执行  sudo diskutil mount disk0s1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注：需要输入密码 <br> 成功后长这个样子 <br><img src="https://img-blog.csdnimg.cn/20200713010913889.png" alt="在这里插入图片描述"><br> 然后把 U 盘中的 EFI 文件夹复制过来就行了</p><h3 id="第二种方法：进入 windows-PE- 通过 DiskGenius- 进行拷贝。"><a href="# 第二种方法：进入 windows-PE- 通过 DiskGenius- 进行拷贝。" class="headerlink" title="第二种方法：进入 windows/PE 通过 DiskGenius 进行拷贝。"></a><strong>第二种方法：进入 windows/PE 通过 DiskGenius 进行拷贝。</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">因为只要能达到磁盘中的 EFI 分区里有引导文件的目的就行了，</span><br><span class="line">所以其实也不一定能非要从 U 盘里拷贝，</span><br><span class="line">所以最简单的方式就是进入 windows/PE 通过 DiskGenius 进行拷贝。</span><br></pre></td></tr></table></figure><p>进入 windows/PE 打开 DiskGenius，将 U 盘中的 EFI 文件夹复制过去就行了<br><img src="https://img-blog.csdnimg.cn/202007130140429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxMjgzMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="添加 UEFI 引导选项"><a href="# 添加 UEFI 引导选项" class="headerlink" title="添加 UEFI 引导选项 **"></a>添加 UEFI 引导选项 **</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">还差最后一步，否则系统发现了引导，不能自启动选择进入系统，</span><br><span class="line">所以要进入 PE 添加 UEFI 引导，重启选择 U 盘中的 PE 系统 </span><br><span class="line"> 因为我们是 OC 引导所以，下图中的文件选择就不是在 CLOVER 文件夹里了（因为也没有），</span><br><span class="line">而是在 &#x2F;EFI&#x2F;BOOT 里</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200713011438271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxMjgzMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="重启 f2 进入 bios 将 mac 引导放在第一启动项就可以 win-mac- 双系统选择了"><a href="# 重启 f2 进入 bios 将 mac 引导放在第一启动项就可以 win-mac- 双系统选择了" class="headerlink" title="重启 f2 进入 bios 将 mac 引导放在第一启动项就可以 win/mac 双系统选择了"></a><strong>重启 f2 进入 bios 将 mac 引导放在第一启动项就可以 win/mac 双系统选择了</strong></h2>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;步骤&quot;&gt;&lt;a href=&quot;# 步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤 &lt;/h1&gt;&lt;p&gt; 前提：bios 关闭安全启动 &lt;br&gt; 下载镜像【黑锅小兵的部落阁】**&lt;/p&gt;
&lt;h2 id=&quot;通过 etcher- 将镜像刻录到 16G 以上的 U 盘中&quot;&gt;&lt;a href=&quot;# 通过 etcher- 将镜像刻录到 16G 以上的 U 盘中&quot; class=&quot;headerlink&quot; title=&quot;通过 etcher 将镜像刻录到 16G 以上的 U 盘中&quot;&gt;&lt;/a&gt;&lt;strong&gt;通过 etcher 将镜像刻录到 16G 以上的 U 盘中&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;%5Cgallery%5C2.png&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="系统" scheme="http://q2418100271.github.io/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>重要の事</title>
    <link href="http://q2418100271.github.io/posts/36215/"/>
    <id>http://q2418100271.github.io/posts/36215/</id>
    <published>2021-01-08T13:10:37.000Z</published>
    <updated>2021-01-10T19:36:02.626Z</updated>
    
    <content type="html"><![CDATA[<p> 今后我会以让你幸福作为我的人生意义!</p><p>​                                                                                     to OXX</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 今后我会以让你幸福作为我的人生意义!&lt;/p&gt;
&lt;p&gt;​                                                                                     to OXX&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="MOST" scheme="http://q2418100271.github.io/tags/MOST/"/>
    
  </entry>
  
  <entry>
    <title>搭建博客过程记录</title>
    <link href="http://q2418100271.github.io/posts/22164/"/>
    <id>http://q2418100271.github.io/posts/22164/</id>
    <published>2021-01-08T09:06:05.000Z</published>
    <updated>2021-01-08T13:48:18.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博客环境搭建"><a href="# 博客环境搭建" class="headerlink" title="博客环境搭建"></a>博客环境搭建</h1><blockquote><p>本文系统环境信息：Win10 专业版，64 位（10.0 版本 18362）</p><p>Node.js：12.13.0 Git：2.24.0</p></blockquote><h2 id="下载 Git 和 Node-js"><a href="# 下载 Git 和 Node-js" class="headerlink" title="下载 Git 和 Node.js"></a>下载 Git 和 Node.js</h2><h3 id="Node-js 的安装与配置"><a href="#Node-js 的安装与配置" class="headerlink" title="Node.js 的安装与配置"></a>Node.js 的安装与配置 </h3><p> 首先去<a href="https://nodejs.org/en/download/">Node.js 官网</a> 下载 node.js 的安装程序，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvbm9kZWpzLTAucG5n?x-oss-process=image/format,png" alt="Node.js 下载以及版本的选择"></p><p>下载好与电脑系统对应的安装程序后，开始安装流程：</p><ol><li>打开下载好的 Node.js 安装程序，点击 Next，进行下一步的安装；</li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvbm9kZS0xLnBuZw?x-oss-process=image/format,png" alt="img"></p><p>将”I accept the terms in the License Agreement”前面的复选框勾选，同意安装协议，再点击 Next，进行下一步操作；</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvbm9kZS0yLnBuZw?x-oss-process=image/format,png" alt="img"></p><p>选择 Node.js 安装程序的安装位置，在这里我以”C:\Program Files\nodejs”为例，点击 Next，进入下一步操作；</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvbm9kZS0zLnBuZw?x-oss-process=image/format,png" alt="img"></p><p>选择安装的模块和功能，这里全部安装，并添加到系统环境变量 ，继续点击 Next，进入下一步操作；</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvbm9kZS00LnBuZw?x-oss-process=image/format,png" alt="img"></p><p>这一步可以跳过，这个选项的意思是安装一些编译本地模块的工具，比如 python，C/C++ 等，点击 Next，进入下一步；</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvbm9kZS01LnBuZw?x-oss-process=image/format,png" alt="img"></p><p>点击”Install”，等待 Node.js 安装完成；</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvbm9kZS02LnBuZw?x-oss-process=image/format,png" alt="img"></p><p>当看到下图所显示的情况，Node.js 就成功安装完毕。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvbm9kZS03LnBuZw?x-oss-process=image/format,png" alt="img"></p><p>验证安装，并测试 Node.js 是否加入环境变量，当出现如下图的情况，Node.js 安装大功告成。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvbm9kZS04LnBuZw?x-oss-process=image/format,png" alt="img"></p><p>如果执行 <code>node -v</code> 报错的话，那么手动将 Node.js 的安装路径添加到环境变量中，右击点击我的电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量，在系统变量下找到名为 path 的变量名，如下图：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcxOTExMDcucG5n?x-oss-process=image/format,png" alt="img"></p><p>选中 path，或者双击，然后将你 node.js 的安装路径放在 path 变量值的最后面，如果添加之前 path 值最后有 英文的分号，则直接将路径添加进去即可，如果没有，先添加分号，然后点击保存，回到桌面，打开 cmd（Win+R），执行<code>node -v</code>，看是否成功。</p><ol><li>设置 npm 的镜像源：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 npm 的配置</span></span><br><span class="line">npm config list</span><br><span class="line"><span class="comment"># 默认源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org</span><br><span class="line"><span class="comment"># 临时改变镜像源</span></span><br><span class="line">npm --registry=https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 永久设置为淘宝镜像源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 另一种方式，编辑 ~/.npmrc 加入下面内容</span></span><br><span class="line">registry = https://registry.npm.taobao.org</span><br><span class="line">12345678910</span><br></pre></td></tr></table></figure><p>设置 npm 的内置路径——&gt; 全局模块路径和缓存路径（<em>可选</em>）</p><p>如果不改变内置路径也可，除非你的 C 盘空间足够 bigger，这一步可以略过，不改变的话，它的路径在：</p><blockquote><p>此处参考：<a href="https://blog.csdn.net/jianleking/article/details/79130667">jyjin 的 node 环境变量配置，npm 环境变量配置</a></p></blockquote><ul><li>npm 包全局目录：<code>C:/Users/[username]/AppData/Roaming/npm/node_modules</code></li><li>npm 包全局命令目录：<code>C:/Users/[username]/AppData/Roaming/npm</code></li><li>npm 实际去找全局命令的目录：<code>C:/Users/[username]/.npmrc</code> 文件内容的 <code>prefix</code> 值</li><li>npm 包全局 cache 目录：<code>C:/Users/[username]/.npmrc</code> 文件内容的 <code>cache</code> 值</li></ul><p>首先在你 Node.js 的安装位置，新建两个文件夹，<code>node_global</code>和<code>node_cache</code>，我的路径是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\nodejs\node_global</span><br><span class="line">C:\Program Files\nodejs\node_cache</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p>然后分别执行的命令就是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix<span class="string">&quot;C:\Program Files\nodejs\node_global&quot;</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;C:\Program Files\nodejs\node_cache&quot;</span></span><br><span class="line">12</span><br></pre></td></tr></table></figure><p>然后在配置环境变量，右击我的电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量同样的位置，在用户变量的地方，找到 path 变量进行修改，修改值如下图：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvbm9kZS0xMS5wbmc?x-oss-process=image/format,png" alt="img"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvbm9kZS0xMi5wbmc?x-oss-process=image/format,png" alt="img"></p><p>然后就大功告成了，Node.js 就安装完毕了，下面开始 Git 安装。👇👇👇</p><h3 id="Git 的安装与配置"><a href="#Git 的安装与配置" class="headerlink" title="Git 的安装与配置"></a>Git 的安装与配置 </h3><p> 首先就是去 <a href="https://git-scm.com/">Git 官网</a> 下载 Git，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcxOTM3MzcucG5n?x-oss-process=image/format,png" alt="img"></p><ol><li>下载好 Git 的安装包，开始安装，打开安装包，出现如图的界面，点击 Next：</li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvZ2l0LTEucG5n?x-oss-process=image/format,png" alt="img"></p><ol><li>选择你要安装的位置，我以 C 盘为例，路径为图中所示，安装到其他位置的话，点击 Browse，选择你要安装的位置，然后点击 Next，进入下一步：</li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvZ2l0LTIucG5n?x-oss-process=image/format,png" alt="img"></p><ol><li>选择你是否创建桌面快捷放方式，其他默认即可，点击 Next，进入下一步：</li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvZ2l0LTMucG5n?x-oss-process=image/format,png" alt="img"></p><ol><li>是否将 Git 快捷方式的目录加入开是菜单栏</li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvZ2l0LTQucG5n?x-oss-process=image/format,png" alt="img"></p><ol><li>这个是选择文本编辑器的方式，默认是 Vim，也可以选择其他的方式，自主选择，在这里我选择的 Vim 默认方式。选择好文本编辑器的方式后，点击 Next，进入下一个流程：</li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvZ2l0LTUucG5n?x-oss-process=image/format,png" alt="img"></p><ol><li>选择安装 Git 时对环境变量 PATH 的影响，第一种影响较小，第三种会影响到 Windows 的自带工具，默认勾选中间项，建议不要修改，直接点击 “Next” 继续安装：</li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvZ2l0LTYucG5n?x-oss-process=image/format,png" alt="img"></p><ol><li>选择 Git 在使用 HTTPS 时使用的库，若无特殊需求，可保持默认选项，点击 “Next” 继续安装：</li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvZ2l0LTcucG5n?x-oss-process=image/format,png" alt="img"></p><ol><li>选择提交与拉取记录时，对换行符的处理方式，若无特殊需要，默认选择即可，点击 “Next” 继续安装：</li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvZ2l0LTgucG5n?x-oss-process=image/format,png" alt="img"></p><ol><li>选择模拟终端软件（即命令行窗口软件），若无特殊需要，可默认选择，点击 “Next” 继续安装：</li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvZ2l0LTkucG5n?x-oss-process=image/format,png" alt="img"></p><ol><li>最新功能的询问，若不想尝试尚未保证稳定性的新功能，默认不勾选，点击 “Install” 即可完成安装：</li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvZ2l0LTEwLnBuZw?x-oss-process=image/format,png" alt="img"></p><ol><li>安装完成</li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvZ2l0LTExLnBuZw?x-oss-process=image/format,png" alt="img"></p><ol><li>回到桌面，点击鼠标右键，会出现两个选项 <code>Git GUI Here</code> 和<code>Git Bash Here</code>，在打开 Cmd(Win+R)，分别输入 <code>git</code> 和<code>git --version</code>，如果出现如下图的情况，即安装成功！</li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvZ2l0LTEyLnBuZw?x-oss-process=image/format,png" alt="img"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvZ2l0LTEzLnBuZw?x-oss-process=image/format,png" alt="img"></p><h1 id="Github 注册以及 Github-Pages 创建"><a href="#Github 注册以及 Github-Pages 创建" class="headerlink" title="Github 注册以及 Github Pages 创建"></a>Github 注册以及 Github Pages 创建</h1><ol><li>打开 Github<a href="https://github.com/">官网首页</a>，点击右上角的<strong>Sign Up</strong> ，然后在出现的页面上填写你的相关信息，进行注册：</li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMDM0MzIucG5n?x-oss-process=image/format,png" alt="img"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMDQ2MzkucG5n?x-oss-process=image/format,png" alt="img"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMDQ5NTUucG5n?x-oss-process=image/format,png" alt="img"></p><p>验证完成后，点击 Next：Select a plan，会出现如上图的验证界面，同理，只需要将其中的动物调整为正向显示即可。接着会出现下图的界面，选择 Free，下方的两个选项可选可不选，点击 <strong>Continue</strong> 继续：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMTE0MzEucG5n?x-oss-process=image/format,png" alt="img"></p><p>这时 Github 会给你发一封邮件，验证一下即可，验证过后才可以创建库。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMTI3MjEucG5n?x-oss-process=image/format,png" alt="img"></p><p>验证完成后，开始创建库，如下图所示，仓库名创建格式必须为：<code>&lt; 用户名 &gt;.github.io</code>，<code>Description</code>为描述仓库，自定义写，填写必要的描述，也可不填。勾选 <code>Initialize this repository with a README</code> 点击 <code>Creat repository</code> 进行创建。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMTI1MzgucG5n?x-oss-process=image/format,png" alt="img"></p><p>然后就会出现如图所示的界面，即仓库创建成功！</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMTMzMjEucG5n?x-oss-process=image/format,png" alt="img"></p><p>我们来测试一下，点击<code>Create new file</code>，出现如下界面，然后命名文件名为<code>index.html</code>，在填写如图的内容，再点击<code>Commit new file</code>，即创建成功，然后打开一个新的网页，输入网址<code>https://&lt; 你的用户名 &gt;.github.io</code>，即可以看见一个新的网页，其中的内容就是你写的内容。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMTQwMjkucG5n?x-oss-process=image/format,png" alt="img"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMTM5NTcucG5n?x-oss-process=image/format,png" alt="img"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMTQ0NTAucG5n?x-oss-process=image/format,png" alt="img"></p><p>至此，Github 的注册以及 Github Pages 已经创建完成了。</p><h1 id="配置 Git 用户名和邮箱"><a href="# 配置 Git 用户名和邮箱" class="headerlink" title="配置 Git 用户名和邮箱"></a>配置 Git 用户名和邮箱 </h1><p> 在桌面点击鼠标右键，点击<code>Git Bash Here</code>，会出现一个界面如下图所示：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMTUxMTgucG5n?x-oss-process=image/format,png" alt="img"></p><p>然后分别输入下面的两个命令，并回车：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot; 此处填写你注册时的用户名 &quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot; 此处填写你注册时的邮箱 &quot;</span></span><br><span class="line"><span class="comment"># 一般只要不报错，可以跳过下面寻找.gitconfig 文件</span></span><br><span class="line">123</span><br></pre></td></tr></table></figure><p>然后找到 <code>.gitconfig</code> 文件，文件存放位置在<code>C:/Users/[username]/.gitconfig</code>（未找到的话，请开启显示隐藏文件的功能），用编辑器打开，看到如下图所示的内容，即配置成功！</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMjAwMTYucG5n?x-oss-process=image/format,png" alt="img"></p><h1 id="本地安装 hexo 静态博客框架以及发布到 Github-Pages"><a href="# 本地安装 hexo 静态博客框架以及发布到 Github-Pages" class="headerlink" title="本地安装 hexo 静态博客框架以及发布到 Github Pages"></a>本地安装 hexo 静态博客框架以及发布到 Github Pages</h1><ol><li>首先选择一个磁盘作为你博客文件的存放位置，然后新建一个文件夹，比如名为 blogtest 的文件夹，创建完后，先不要点进去，在此处点击鼠标右键，选择<code>Git Bash Here</code>，然后依次输入如下命令，：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo 框架的安装</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="comment"># 等上一个命令完成后，在输入下面的命令</span></span><br><span class="line">hexo init &lt; 新建文件夹的名称 &gt;  <span class="comment"># 初始化文件夹</span></span><br><span class="line"><span class="built_in">cd</span> &lt; 新建文件夹的名称 &gt;</span><br><span class="line">npm install  <span class="comment"># 安装博客所需要的依赖文件</span></span><br><span class="line">123456</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMjExMjkucG5n?x-oss-process=image/format,png" alt="img"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMjExNDQucG5n?x-oss-process=image/format,png" alt="img"></p><p>等待运行完成，此时文件夹中多了许多文件。<br><strong>注意 </strong>：<strong> 后续的命令均需要在站点目录下（即文件夹内）使用 Git Bash 运行。</strong><br>此时 Hexo 框架的本地搭建已经完成了。我们来运行一下看看，命令行依次输入以下命令 :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMjExNTcucG5n?x-oss-process=image/format,png" alt="img"></p><p>浏览器中打开<a href="http://locakhost:4000 或者 127.0.0.1:4000，可以看到一个网页，说明 Hexo 博客已经成功在本地运行。">http://locakhost:4000 或者 127.0.0.1:4000，可以看到一个网页，说明 Hexo 博客已经成功在本地运行。</a></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMjEyMDYucG5n?x-oss-process=image/format,png" alt="img"></p><h2 id="本地博客发布到 Github-Pages"><a href="# 本地博客发布到 Github-Pages" class="headerlink" title="本地博客发布到 Github Pages"></a>本地博客发布到 Github Pages</h2><p>之前的步骤中，我们已经完成了对 Github 账户的注册以及 Github Pages 的创建，接下来是将本地博客发布至 Github Pages。</p><ol><li>首先需要安装发布的插件，在站点目录下执行下面的命令，也就是创建的博客目录下：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">1</span><br></pre></td></tr></table></figure><ol><li>紧接着，将本地目录与 GitHub 关联起来，输入下面的命令行：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot; 你的邮箱地址 &quot;</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>输入后一直回车，然后在 <code>C:/Users/[username]</code> 目录下找到名为 <code>.ssh</code> 的文件夹， 文件夹内会有两个文件，一个 <code>id_rsa.pub</code> 一个<code>id_rsa</code>，用文本编辑器打开<code>id_rsa.pub</code>，复制里面的的内容。 然后打开 Github，点击右上角的头像 <strong>Settings</strong> 选择<strong>SSH and GPG keys</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMjI3NDYucG5n?x-oss-process=image/format,png" alt="img"></p><p>点击 <strong>New SSH key</strong> 将之前复制的内容粘帖到 Key 的框中。 上面的<strong>Title</strong> 可以随意，点击<strong>Add SSH key</strong> 完成添加。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMjMwNDkucG5n?x-oss-process=image/format,png" alt="img"></p><p>然后回到 Git 的命令行界面，测试一下是否与 GitHub 连接成功。输入下面的命令行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>点击回车，然后会出现一个询问内容，输入 <code>yes</code>，回车，会出现一段内容，<code>Hi &lt;account name&gt;! You&#39;ve successfully authenticated, but GitHub doesnot provide shell access.</code>。 说明连接成功。此处这个<code>&lt;account name&gt;</code> 应该是你 Github 的用户名。</p><ol><li>进入博客站点目录，用文本编辑器打开 <code>_config.yml</code>，这个<code>_config.yml</code> 是博客的配置文件，在以后的博客修改，如个性化修改，博客 SEO 优化等都会使用到，修改如下图的几个地方：</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">你的博客名 </span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string"> 博客的副标题，有些主题支持 </span></span><br><span class="line"><span class="attr">description:</span> <span class="string"> 博客描述 </span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string"> 博客关键词 </span></span><br><span class="line"><span class="attr">author:</span> <span class="string"> 作者，在文章中显示 </span></span><br><span class="line"><span class="attr">language:</span> <span class="string"> 博客语言语种 </span>   </span><br><span class="line"><span class="attr">timezone:</span> <span class="string"> 时区</span></span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMjQxMzgucG5n?x-oss-process=image/format,png" alt="img"></p><p>滑到文件最底部，有一个 deploy，在 deploy 下面添加一个 repo 项 ，一个 branch 项。填入如下代码，并如下图所示：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">git@github.com:Github 用户名 /github 用户名.github.io.git</span>  </span><br><span class="line"><span class="string">// 也可使用 https 地址，如：https://github.com/Github 用户名 /Github 用户名.github.io.git</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMjQxNTEucG5n?x-oss-process=image/format,png" alt="img"></p><ol><li>最后就是生成页面，并发布至 Github Pages，执行如下命令：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo 会根据配置文件渲染出一套静态页面</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment"># 将上一步渲染出的一系列文件上传至至 Github Pages</span></span><br><span class="line">hexo d</span><br><span class="line"><span class="comment"># 也可以直接输入此命令，直接完成渲染和上传</span></span><br><span class="line">hexo g -d</span><br><span class="line">123456</span><br></pre></td></tr></table></figure><p>上传完成后，在浏览器中打开<strong>https://&lt; 用户名 &gt;.github.io</strong>，查看上传的网页。如果页面变成了之前本地调试时的样子，说明上传以及完成了。没变的话查看一下上传时命令行窗口的信息有没有错误信息，没有的话清除一下浏览器缓存试试。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;博客环境搭建&quot;&gt;&lt;a href=&quot;# 博客环境搭建&quot; class=&quot;headerlink&quot; title=&quot;博客环境搭建&quot;&gt;&lt;/a&gt;博客环境搭建&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本文系统环境信息：Win10 专业版，64 位（10.0 版本 18362）&lt;/</summary>
      
    
    
    
    
    <category term="首次" scheme="http://q2418100271.github.io/tags/%E9%A6%96%E6%AC%A1/"/>
    
  </entry>
  
</feed>
